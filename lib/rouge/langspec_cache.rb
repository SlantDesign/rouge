# -*- coding: utf-8 -*- #
# frozen_string_literal: true
# automatically generated by /Users/jeanineadkisson/src/rouge/tasks/generate/cache.rake

module Rouge
  Lexer.cache "./lib/rouge/lexers/scheme.rb", :Scheme, "scheme" do
    @props[:tag] = "scheme"
    @props[:title] = "Scheme"
    @props[:desc] = "The Scheme variant of Lisp"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/scheme")
    @props[:aliases] = []
    @props[:filenames] = ["*.scm", "*.ss"]
    @props[:mimetypes] = ["text/x-scheme", "application/x-scheme"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/clojure.rb", :Clojure, "clojure" do
    @props[:tag] = "clojure"
    @props[:title] = "Clojure"
    @props[:desc] = "The Clojure programming language (clojure.org)"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/clojure")
    @props[:aliases] = ["clj", "cljs"]
    @props[:filenames] = ["*.clj", "*.cljs", "*.cljc", "build.boot", "*.edn"]
    @props[:mimetypes] = ["text/x-clojure", "application/x-clojure"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/haxe.rb", :Haxe, "haxe" do
    @props[:tag] = "haxe"
    @props[:title] = "Haxe"
    @props[:desc] = "Haxe Cross-platform Toolkit (http://haxe.org)"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/haxe")
    @props[:aliases] = ["hx", "haxe"]
    @props[:filenames] = ["*.hx"]
    @props[:mimetypes] = ["text/haxe", "text/x-haxe", "text/x-hx"]
      def self.detect?(text)
        return true if text.shebang? "haxe"
      end
    @props[:detectable?] = true
  end

  Lexer.cache "./lib/rouge/lexers/brainfuck.rb", :Brainfuck, "brainfuck" do
    @props[:tag] = "brainfuck"
    @props[:title] = "Brainfuck"
    @props[:desc] = "The Brainfuck programming language"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/brainfuck")
    @props[:aliases] = []
    @props[:filenames] = ["*.b", "*.bf"]
    @props[:mimetypes] = ["text/x-brainfuck"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/json.rb", :JSON, "json" do
    @props[:tag] = "json"
    @props[:title] = "JSON"
    @props[:desc] = "JavaScript Object Notation (json.org)"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/json")
    @props[:aliases] = []
    @props[:filenames] = ["*.json", "Pipfile.lock"]
    @props[:mimetypes] = ["application/json", "application/vnd.api+json", "application/hal+json", "application/problem+json", "application/schema+json"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/wollok.rb", :Wollok, "wollok" do
    @props[:tag] = "wollok"
    @props[:title] = "Wollok"
    @props[:desc] = "Wollok lang"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/wollok")
    @props[:aliases] = []
    @props[:filenames] = ["*.wlk", "*.wtest", "*.wpgm"]
    @props[:mimetypes] = []
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/toml.rb", :TOML, "toml" do
    @props[:tag] = "toml"
    @props[:title] = "TOML"
    @props[:desc] = "the TOML configuration format (https://github.com/mojombo/toml)"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/toml")
    @props[:aliases] = []
    @props[:filenames] = ["*.toml", "Pipfile"]
    @props[:mimetypes] = ["text/x-toml"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/scala.rb", :Scala, "scala" do
    @props[:tag] = "scala"
    @props[:title] = "Scala"
    @props[:desc] = "The Scala programming language (scala-lang.org)"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/scala")
    @props[:aliases] = ["scala"]
    @props[:filenames] = ["*.scala", "*.sbt"]
    @props[:mimetypes] = ["text/x-scala", "application/x-scala"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/groovy.rb", :Groovy, "groovy" do
    @props[:tag] = "groovy"
    @props[:title] = "Groovy"
    @props[:desc] = "The Groovy programming language (http://www.groovy-lang.org/)"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/groovy")
    @props[:aliases] = []
    @props[:filenames] = ["*.groovy", "Jenkinsfile"]
    @props[:mimetypes] = ["text/x-groovy"]
      def self.detect?(text)
        return true if text.shebang?(/groovy/)
      end
    @props[:detectable?] = true
  end

  Lexer.cache "./lib/rouge/lexers/rust.rb", :Rust, "rust" do
    @props[:tag] = "rust"
    @props[:title] = "Rust"
    @props[:desc] = "The Rust programming language (rust-lang.org)"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/rust")
    @props[:aliases] = ["rs", "rust,no_run", "rs,no_run", "rust,ignore", "rs,ignore", "rust,should_panic", "rs,should_panic"]
    @props[:filenames] = ["*.rs"]
    @props[:mimetypes] = ["text/x-rust"]
      def self.detect?(text)
        return true if text.shebang? 'rustc'
      end
    @props[:detectable?] = true
  end

  Lexer.cache "./lib/rouge/lexers/vue.rb", :Vue, "vue" do
    @props[:tag] = "vue"
    @props[:title] = "Vue"
    @props[:desc] = "Vue.js single-file components"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/vue")
    @props[:aliases] = ["vuejs"]
    @props[:filenames] = ["*.vue"]
    @props[:mimetypes] = ["text/x-vue", "application/x-vue"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/idlang.rb", :IDLang, "idlang" do
    @props[:tag] = "idlang"
    @props[:title] = "IDL"
    @props[:desc] = "Interactive Data Language"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/idlang")
    @props[:aliases] = []
    @props[:filenames] = ["*.idl"]
    @props[:mimetypes] = []
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/batchfile.rb", :Batchfile, "batchfile" do
    @props[:tag] = "batchfile"
    @props[:title] = "Batchfile"
    @props[:desc] = "Windows Batch File"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/batchfile")
    @props[:aliases] = ["bat", "batch", "dosbatch", "winbatch"]
    @props[:filenames] = ["*.bat", "*.cmd"]
    @props[:mimetypes] = ["application/bat", "application/x-bat", "application/x-msdos-program"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/ghc_core.rb", :GHCCore, "ghc-core" do
    @props[:tag] = "ghc-core"
    @props[:title] = "GHC Core"
    @props[:desc] = "Intermediate representation of the GHC Haskell compiler."
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/ghc-core")
    @props[:aliases] = []
    @props[:filenames] = ["*.dump-simpl", "*.dump-cse", "*.dump-ds", "*.dump-spec"]
    @props[:mimetypes] = []
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/xojo.rb", :Xojo, "xojo" do
    @props[:tag] = "xojo"
    @props[:title] = "Xojo"
    @props[:desc] = "Xojo"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/xojo")
    @props[:aliases] = ["realbasic"]
    @props[:filenames] = ["*.xojo_code", "*.xojo_window", "*.xojo_toolbar", "*.xojo_menu", "*.xojo_image", "*.rbbas", "*.rbfrm", "*.rbmnu", "*.rbres", "*.rbtbar"]
    @props[:mimetypes] = []
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/m68k.rb", :M68k, "m68k" do
    @props[:tag] = "m68k"
    @props[:title] = "M68k"
    @props[:desc] = "Motorola 68k Assembler"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/m68k")
    @props[:aliases] = []
    @props[:filenames] = []
    @props[:mimetypes] = []
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/dot.rb", :Dot, "dot" do
    @props[:tag] = "dot"
    @props[:title] = "DOT"
    @props[:desc] = "graph description language"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/dot")
    @props[:aliases] = []
    @props[:filenames] = ["*.dot"]
    @props[:mimetypes] = ["text/vnd.graphviz"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/lustre.rb", :Lustre, "lustre" do
    @props[:tag] = "lustre"
    @props[:title] = "Lustre"
    @props[:desc] = "The Lustre programming language (Verimag)"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/lustre")
    @props[:aliases] = []
    @props[:filenames] = ["*.lus"]
    @props[:mimetypes] = ["text/x-lustre"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/praat.rb", :Praat, "praat" do
    @props[:tag] = "praat"
    @props[:title] = "Praat"
    @props[:desc] = "The Praat scripting language (praat.org)"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/praat")
    @props[:aliases] = []
    @props[:filenames] = ["*.praat", "*.proc", "*.psc"]
    @props[:mimetypes] = []
      def self.detect?(text)
        return true if text.shebang? 'praat'
      end
    @props[:detectable?] = true
  end

  Lexer.cache "./lib/rouge/lexers/lutin.rb", :Lutin, "lutin" do
    @props[:tag] = "lutin"
    @props[:title] = "Lutin"
    @props[:desc] = "The Lutin programming language (Verimag)"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/lutin")
    @props[:aliases] = []
    @props[:filenames] = ["*.lut"]
    @props[:mimetypes] = ["text/x-lutin"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/php.rb", :PHP, "php" do
    @props[:tag] = "php"
    @props[:title] = "PHP"
    @props[:desc] = "The PHP scripting language (php.net)"
    @props[:option_docs] = {"parent"=>"the parent language (default: html)", "start_inline"=>"Whether to start with inline php or require <?php ... ?>. (default: best guess)", "funcnamehighlighting"=>"Whether to highlight builtin functions (default: true)", "disabledmodules"=>"Disable certain modules from being highlighted as builtins (default: empty)"}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/php")
    @props[:aliases] = ["php", "php3", "php4", "php5"]
    @props[:filenames] = ["*.php", "*.php[345t]", "*.phtml", "*.module", "*.inc", "*.profile", "*.install", "*.test"]
    @props[:mimetypes] = ["text/x-php"]
      def self.detect?(text)
        return true if text.shebang?('php')
        return false if /^<\?hh/ =~ text
        return true if /^<\?php/ =~ text
      end
    @props[:detectable?] = true
  end

  Lexer.cache "./lib/rouge/lexers/sql.rb", :SQL, "sql" do
    @props[:tag] = "sql"
    @props[:title] = "SQL"
    @props[:desc] = "Structured Query Language, for relational databases"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/sql")
    @props[:aliases] = []
    @props[:filenames] = ["*.sql"]
    @props[:mimetypes] = ["text/x-sql"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/ini.rb", :INI, "ini" do
    @props[:tag] = "ini"
    @props[:title] = "INI"
    @props[:desc] = "the INI configuration format"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/ini")
    @props[:aliases] = []
    @props[:filenames] = ["*.ini", "*.INI", "*.gitconfig"]
    @props[:mimetypes] = ["text/x-ini"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/jsl.rb", :JSL, "jsl" do
    @props[:tag] = "jsl"
    @props[:title] = "JSL"
    @props[:desc] = "The JMP Scripting Language (JSL) (jmp.com)"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/jsl")
    @props[:aliases] = []
    @props[:filenames] = ["*.jsl"]
    @props[:mimetypes] = []
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/abap.rb", :ABAP, "abap" do
    @props[:tag] = "abap"
    @props[:title] = "ABAP"
    @props[:desc] = "SAP - Advanced Business Application Programming"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/abap")
    @props[:aliases] = []
    @props[:filenames] = ["*.abap"]
    @props[:mimetypes] = ["text/x-abap"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/fortran.rb", :Fortran, "fortran" do
    @props[:tag] = "fortran"
    @props[:title] = "Fortran"
    @props[:desc] = "Fortran 2008 (free-form)"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/fortran")
    @props[:aliases] = []
    @props[:filenames] = ["*.f", "*.f90", "*.f95", "*.f03", "*.f08", "*.F", "*.F90", "*.F95", "*.F03", "*.F08"]
    @props[:mimetypes] = ["text/x-fortran"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/elm.rb", :Elm, "elm" do
    @props[:tag] = "elm"
    @props[:title] = "Elm"
    @props[:desc] = "The Elm programming language (http://elm-lang.org/)"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/elm")
    @props[:aliases] = []
    @props[:filenames] = ["*.elm"]
    @props[:mimetypes] = ["text/x-elm"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/racket.rb", :Racket, "racket" do
    @props[:tag] = "racket"
    @props[:title] = "Racket"
    @props[:desc] = "Racket is a Lisp descended from Scheme (racket-lang.org)"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/racket")
    @props[:aliases] = []
    @props[:filenames] = ["*.rkt", "*.rktd", "*.rktl"]
    @props[:mimetypes] = ["text/x-racket", "application/x-racket"]
      def self.detect?(text)
        text =~ /\A#lang\s*(.*?)$/
        lang_attr = $1
        return false unless lang_attr
        return true if lang_attr =~ /racket|scribble/
      end
    @props[:detectable?] = true
  end

  Lexer.cache "./lib/rouge/lexers/jsp.rb", :JSP, "jsp" do
    @props[:tag] = "jsp"
    @props[:title] = "Jsp"
    @props[:desc] = "JSP"
    @props[:option_docs] = {"parent"=>"the parent language (default: html)"}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/jsp")
    @props[:aliases] = []
    @props[:filenames] = ["*.jsp"]
    @props[:mimetypes] = ["text/x-jsp", "application/x-jsp"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/haskell.rb", :Haskell, "haskell" do
    @props[:tag] = "haskell"
    @props[:title] = "Haskell"
    @props[:desc] = "The Haskell programming language (haskell.org)"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/haskell")
    @props[:aliases] = ["hs"]
    @props[:filenames] = ["*.hs", "*.hs-boot"]
    @props[:mimetypes] = ["text/x-haskell"]
      def self.detect?(text)
        return true if text.shebang?('runhaskell')
      end
    @props[:detectable?] = true
  end

  Lexer.cache "./lib/rouge/lexers/julia.rb", :Julia, "julia" do
    @props[:tag] = "julia"
    @props[:title] = "Julia"
    @props[:desc] = "The Julia programming language"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/julia")
    @props[:aliases] = ["jl"]
    @props[:filenames] = ["*.jl"]
    @props[:mimetypes] = ["text/x-julia", "application/x-julia"]
      def self.detect?(text)
        return true if text.shebang? 'julia'
      end
    @props[:detectable?] = true
  end

  Lexer.cache "./lib/rouge/lexers/javascript.rb", :Javascript, "javascript" do
    @props[:tag] = "javascript"
    @props[:title] = "JavaScript"
    @props[:desc] = "JavaScript, the browser scripting language"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/javascript")
    @props[:aliases] = ["js"]
    @props[:filenames] = ["*.js", "*.mjs"]
    @props[:mimetypes] = ["application/javascript", "application/x-javascript", "text/javascript", "text/x-javascript"]
      def self.detect?(text)
        return 1 if text.shebang?('node')
        return 1 if text.shebang?('jsc')
        # TODO: rhino, spidermonkey, etc
      end
    @props[:detectable?] = true
  end

  Lexer.cache "./lib/rouge/lexers/q.rb", :Q, "q" do
    @props[:tag] = "q"
    @props[:title] = "Q"
    @props[:desc] = "The Q programming language (kx.com)"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/q")
    @props[:aliases] = ["kdb+"]
    @props[:filenames] = ["*.q"]
    @props[:mimetypes] = ["text/x-q", "application/x-q"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/literate_coffeescript.rb", :LiterateCoffeescript, "literate_coffeescript" do
    @props[:tag] = "literate_coffeescript"
    @props[:title] = "Literate CoffeeScript"
    @props[:desc] = "Literate coffeescript"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/literate_coffeescript")
    @props[:aliases] = ["litcoffee"]
    @props[:filenames] = ["*.litcoffee"]
    @props[:mimetypes] = []
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/qml.rb", :Qml, "qml" do
    @props[:tag] = "qml"
    @props[:title] = "QML"
    @props[:desc] = "QML, a UI markup language"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/qml")
    @props[:aliases] = ["qml"]
    @props[:filenames] = ["*.qml"]
    @props[:mimetypes] = ["application/x-qml", "text/x-qml"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/protobuf.rb", :Protobuf, "protobuf" do
    @props[:tag] = "protobuf"
    @props[:title] = "Protobuf"
    @props[:desc] = "Google's language-neutral, platform-neutral, extensible mechanism for serializing structured data"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/protobuf")
    @props[:aliases] = ["proto"]
    @props[:filenames] = ["*.proto"]
    @props[:mimetypes] = ["text/x-proto"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/lasso.rb", :Lasso, "lasso" do
    @props[:tag] = "lasso"
    @props[:title] = "Lasso"
    @props[:desc] = "The Lasso programming language (lassosoft.com)"
    @props[:option_docs] = {"parent"=>"the parent language (default: html)", "start_inline"=>"Whether to start inline instead of requiring <?lasso or ["}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/lasso")
    @props[:aliases] = ["lassoscript"]
    @props[:filenames] = ["*.lasso", "*.lasso[89]"]
    @props[:mimetypes] = ["text/x-lasso", "text/html+lasso", "application/x-httpd-lasso"]
      def self.detect?(text)
        return true if text.shebang?('lasso9')
        return true if text =~ /\A.*?<\?(lasso(script)?|=)/
      end
    @props[:detectable?] = true
  end

  Lexer.cache "./lib/rouge/lexers/robot_framework.rb", :RobotFramework, "robot_framework" do
    @props[:tag] = "robot_framework"
    @props[:title] = "Robot Framework"
    @props[:desc] = "Robot Framework is a generic open source automation testing framework (robotframework.org)"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/robot_framework")
    @props[:aliases] = ["robot", "robot-framework"]
    @props[:filenames] = ["*.robot"]
    @props[:mimetypes] = ["text/x-robot"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/http.rb", :HTTP, "http" do
    @props[:tag] = "http"
    @props[:title] = "HTTP"
    @props[:desc] = "http requests and responses"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/http")
    @props[:aliases] = []
    @props[:filenames] = []
    @props[:mimetypes] = []
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/actionscript.rb", :Actionscript, "actionscript" do
    @props[:tag] = "actionscript"
    @props[:title] = "ActionScript"
    @props[:desc] = "ActionScript"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/actionscript")
    @props[:aliases] = ["as", "as3"]
    @props[:filenames] = ["*.as"]
    @props[:mimetypes] = ["application/x-actionscript"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/swift.rb", :Swift, "swift" do
    @props[:tag] = "swift"
    @props[:title] = "Swift"
    @props[:desc] = "Multi paradigm, compiled programming language developed by Apple for iOS and OS X development. (developer.apple.com/swift)"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/swift")
    @props[:aliases] = []
    @props[:filenames] = ["*.swift"]
    @props[:mimetypes] = []
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/puppet.rb", :Puppet, "puppet" do
    @props[:tag] = "puppet"
    @props[:title] = "Puppet"
    @props[:desc] = "The Puppet configuration management language (puppetlabs.org)"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/puppet")
    @props[:aliases] = ["pp"]
    @props[:filenames] = ["*.pp"]
    @props[:mimetypes] = []
      def self.detect?(text)
        return true if text.shebang? 'puppet-apply'
        return true if text.shebang? 'puppet'
      end
    @props[:detectable?] = true
  end

  Lexer.cache "./lib/rouge/lexers/markdown.rb", :Markdown, "markdown" do
    @props[:tag] = "markdown"
    @props[:title] = "Markdown"
    @props[:desc] = "Markdown, a light-weight markup language for authors"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/markdown")
    @props[:aliases] = ["md", "mkd"]
    @props[:filenames] = ["*.markdown", "*.md", "*.mkd"]
    @props[:mimetypes] = ["text/x-markdown"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/prometheus.rb", :Prometheus, "prometheus" do
    @props[:tag] = "prometheus"
    @props[:title] = "Prometheus"
    @props[:desc] = "prometheus"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/prometheus")
    @props[:aliases] = ["prometheus"]
    @props[:filenames] = ["*.prometheus"]
    @props[:mimetypes] = ["text/x-prometheus", "application/x-prometheus"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/mason.rb", :Mason, "mason" do
    @props[:tag] = "mason"
    @props[:title] = "Mason"
    @props[:desc] = "The HTML::Mason framework (https://metacpan.org/pod/HTML::Mason)"
    @props[:option_docs] = {"parent"=>"the parent language (default: html)"}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/mason")
    @props[:aliases] = []
    @props[:filenames] = ["*.mi", "*.mc", "*.mas", "*.m", "*.mhtml", "*.mcomp", "autohandler", "dhandler"]
    @props[:mimetypes] = ["text/x-mason", "application/x-mason"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/eex.rb", :EEX, "eex" do
    @props[:tag] = "eex"
    @props[:title] = "EEX"
    @props[:desc] = "Embedded Elixir"
    @props[:option_docs] = {"parent"=>"the parent language (default: html)"}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/eex")
    @props[:aliases] = ["leex"]
    @props[:filenames] = ["*.eex", "*.leex"]
    @props[:mimetypes] = []
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/scss.rb", :Scss, "scss" do
    @props[:tag] = "scss"
    @props[:title] = "SCSS"
    @props[:desc] = "SCSS stylesheets (sass-lang.com)"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/scss")
    @props[:aliases] = []
    @props[:filenames] = ["*.scss"]
    @props[:mimetypes] = ["text/x-scss"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/xpath.rb", :XPath, "xpath" do
    @props[:tag] = "xpath"
    @props[:title] = "XPath"
    @props[:desc] = "XML Path Language (XPath) 3.1"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/xpath")
    @props[:aliases] = []
    @props[:filenames] = ["*.xpath"]
    @props[:mimetypes] = []
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/kotlin.rb", :Kotlin, "kotlin" do
    @props[:tag] = "kotlin"
    @props[:title] = "Kotlin"
    @props[:desc] = "Kotlin Programming Language (http://kotlinlang.org)"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/kotlin")
    @props[:aliases] = []
    @props[:filenames] = ["*.kt", "*.kts"]
    @props[:mimetypes] = ["text/x-kotlin"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/make.rb", :Make, "make" do
    @props[:tag] = "make"
    @props[:title] = "Make"
    @props[:desc] = "Makefile syntax"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/make")
    @props[:aliases] = ["makefile", "mf", "gnumake", "bsdmake"]
    @props[:filenames] = ["*.make", "*.mak", "*.mk", "Makefile", "makefile", "Makefile.*", "GNUmakefile", "*,fe1"]
    @props[:mimetypes] = ["text/x-makefile"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/diff.rb", :Diff, "diff" do
    @props[:tag] = "diff"
    @props[:title] = "diff"
    @props[:desc] = "Lexes unified diffs or patches"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/diff")
    @props[:aliases] = ["patch", "udiff"]
    @props[:filenames] = ["*.diff", "*.patch"]
    @props[:mimetypes] = ["text/x-diff", "text/x-patch"]
      def self.detect?(text)
        return true if text.start_with?('Index: ')
        return true if text =~ %r(\Adiff[^\n]*?\ba/[^\n]*\bb/)
        return true if text =~ /(---|[+][+][+]).*?\n(---|[+][+][+])/
      end
    @props[:detectable?] = true
  end

  Lexer.cache "./lib/rouge/lexers/factor.rb", :Factor, "factor" do
    @props[:tag] = "factor"
    @props[:title] = "Factor"
    @props[:desc] = "Factor, the practical stack language (factorcode.org)"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/factor")
    @props[:aliases] = []
    @props[:filenames] = ["*.factor"]
    @props[:mimetypes] = ["text/x-factor"]
      def self.detect?(text)
        return true if text.shebang? 'factor'
      end
    @props[:detectable?] = true
  end

  Lexer.cache "./lib/rouge/lexers/python.rb", :Python, "python" do
    @props[:tag] = "python"
    @props[:title] = "Python"
    @props[:desc] = "The Python programming language (python.org)"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/python")
    @props[:aliases] = ["py"]
    @props[:filenames] = ["*.py", "*.pyw", "*.sc", "SConstruct", "SConscript", "*.tac", "*.bzl", "BUCK", "BUILD", "BUILD.bazel", "WORKSPACE"]
    @props[:mimetypes] = ["text/x-python", "application/x-python"]
      def self.detect?(text)
        return true if text.shebang?(/pythonw?(?:[23](?:\.\d+)?)?/)
      end
    @props[:detectable?] = true
  end

  Lexer.cache "./lib/rouge/lexers/go.rb", :Go, "go" do
    @props[:tag] = "go"
    @props[:title] = "Go"
    @props[:desc] = "The Go programming language (http://golang.org)"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/go")
    @props[:aliases] = ["go", "golang"]
    @props[:filenames] = ["*.go"]
    @props[:mimetypes] = ["text/x-go", "application/x-go"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/csvs.rb", :CSVS, "csvs" do
    @props[:tag] = "csvs"
    @props[:title] = "csvs"
    @props[:desc] = "The CSV Schema Language (digital-preservation.github.io)"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/csvs")
    @props[:aliases] = []
    @props[:filenames] = ["*.csvs"]
    @props[:mimetypes] = []
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/viml.rb", :VimL, "viml" do
    @props[:tag] = "viml"
    @props[:title] = "VimL"
    @props[:desc] = "VimL, the scripting language for the Vim editor (vim.org)"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/viml")
    @props[:aliases] = ["vim", "vimscript", "ex"]
    @props[:filenames] = ["*.vim", "*.vba", ".vimrc", ".exrc", ".gvimrc", "_vimrc", "_exrc", "_gvimrc"]
    @props[:mimetypes] = ["text/x-vim"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/css.rb", :CSS, "css" do
    @props[:tag] = "css"
    @props[:title] = "CSS"
    @props[:desc] = "Cascading Style Sheets, used to style web pages"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/css")
    @props[:aliases] = []
    @props[:filenames] = ["*.css"]
    @props[:mimetypes] = ["text/css"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/yaml.rb", :YAML, "yaml" do
    @props[:tag] = "yaml"
    @props[:title] = "YAML"
    @props[:desc] = "Yaml Ain't Markup Language (yaml.org)"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/yaml")
    @props[:aliases] = ["yml"]
    @props[:filenames] = ["*.yaml", "*.yml"]
    @props[:mimetypes] = ["text/x-yaml"]
      def self.detect?(text)
        # look for the %YAML directive
        return true if text =~ /\A\s*%YAML/m
      end
    @props[:detectable?] = true
  end

  Lexer.cache "./lib/rouge/lexers/pascal.rb", :Pascal, "pascal" do
    @props[:tag] = "pascal"
    @props[:title] = "Pascal"
    @props[:desc] = "a procedural programming language commonly used as a teaching language."
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/pascal")
    @props[:aliases] = []
    @props[:filenames] = ["*.pas"]
    @props[:mimetypes] = ["text/x-pascal"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/cmhg.rb", :CMHG, "cmhg" do
    @props[:tag] = "cmhg"
    @props[:title] = "CMHG"
    @props[:desc] = "RISC OS C module header generator source file"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/cmhg")
    @props[:aliases] = []
    @props[:filenames] = ["*.cmhg"]
    @props[:mimetypes] = []
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/turtle.rb", :Turtle, "turtle" do
    @props[:tag] = "turtle"
    @props[:title] = "Turtle/TriG"
    @props[:desc] = "Terse RDF Triple Language, TriG"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/turtle")
    @props[:aliases] = []
    @props[:filenames] = ["*.ttl", "*.trig"]
    @props[:mimetypes] = ["text/turtle", "application/trig"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/sqf.rb", :SQF, "sqf" do
    @props[:tag] = "sqf"
    @props[:title] = "SQF"
    @props[:desc] = "Status Quo Function, a Real Virtuality engine scripting language"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/sqf")
    @props[:aliases] = []
    @props[:filenames] = ["*.sqf"]
    @props[:mimetypes] = []
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/vala.rb", :Vala, "vala" do
    @props[:tag] = "vala"
    @props[:title] = "Vala"
    @props[:desc] = "A programming language similar to csharp."
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/vala")
    @props[:aliases] = []
    @props[:filenames] = ["*.vala"]
    @props[:mimetypes] = ["text/x-vala"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/nasm.rb", :Nasm, "nasm" do
    @props[:tag] = "nasm"
    @props[:title] = "Nasm"
    @props[:desc] = "Netwide Assembler"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/nasm")
    @props[:aliases] = []
    @props[:filenames] = ["*.asm"]
    @props[:mimetypes] = []
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/llvm.rb", :LLVM, "llvm" do
    @props[:tag] = "llvm"
    @props[:title] = "LLVM"
    @props[:desc] = "The LLVM Compiler Infrastructure (http://llvm.org/)"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/llvm")
    @props[:aliases] = []
    @props[:filenames] = ["*.ll"]
    @props[:mimetypes] = ["text/x-llvm"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/gradle.rb", :Gradle, "gradle" do
    @props[:tag] = "gradle"
    @props[:title] = "Gradle"
    @props[:desc] = "A powerful build system for the JVM"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/gradle")
    @props[:aliases] = []
    @props[:filenames] = ["*.gradle"]
    @props[:mimetypes] = ["text/x-gradle"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/opentype_feature_file.rb", :OpenTypeFeatureFile, "opentype_feature_file" do
    @props[:tag] = "opentype_feature_file"
    @props[:title] = "OpenType Feature File"
    @props[:desc] = "Feature specifications for an OpenType font (adobe-type-tools.github.io/afdko)"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/opentype_feature_file")
    @props[:aliases] = ["fea", "opentype", "opentypefeature"]
    @props[:filenames] = ["*.fea"]
    @props[:mimetypes] = []
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/coffeescript.rb", :Coffeescript, "coffeescript" do
    @props[:tag] = "coffeescript"
    @props[:title] = "CoffeeScript"
    @props[:desc] = "The Coffeescript programming language (coffeescript.org)"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/coffeescript")
    @props[:aliases] = ["coffee", "coffee-script"]
    @props[:filenames] = ["*.coffee", "Cakefile"]
    @props[:mimetypes] = ["text/coffeescript"]
      def self.detect?(text)
        return true if text.shebang? 'coffee'
      end
    @props[:detectable?] = true
  end

  Lexer.cache "./lib/rouge/lexers/coq.rb", :Coq, "coq" do
    @props[:tag] = "coq"
    @props[:title] = "Coq"
    @props[:desc] = "Coq (coq.inria.fr)"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/coq")
    @props[:aliases] = []
    @props[:filenames] = []
    @props[:mimetypes] = ["text/x-coq"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/csharp.rb", :CSharp, "csharp" do
    @props[:tag] = "csharp"
    @props[:title] = "C#"
    @props[:desc] = "a multi-paradigm language targeting .NET"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/csharp")
    @props[:aliases] = ["c#", "cs"]
    @props[:filenames] = ["*.cs"]
    @props[:mimetypes] = ["text/x-csharp"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/c.rb", :C, "c" do
    @props[:tag] = "c"
    @props[:title] = "C"
    @props[:desc] = "The C programming language"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/c")
    @props[:aliases] = []
    @props[:filenames] = ["*.c", "*.h", "*.idc"]
    @props[:mimetypes] = ["text/x-chdr", "text/x-csrc"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/tcl.rb", :TCL, "tcl" do
    @props[:tag] = "tcl"
    @props[:title] = "Tcl"
    @props[:desc] = "The Tool Command Language (tcl.tk)"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/tcl")
    @props[:aliases] = []
    @props[:filenames] = ["*.tcl"]
    @props[:mimetypes] = ["text/x-tcl", "text/x-script.tcl", "application/x-tcl"]
      def self.detect?(text)
        return true if text.shebang? 'tclsh'
        return true if text.shebang? 'wish'
        return true if text.shebang? 'jimsh'
      end
    @props[:detectable?] = true
  end

  Lexer.cache "./lib/rouge/lexers/tap.rb", :Tap, "tap" do
    @props[:tag] = "tap"
    @props[:title] = "TAP"
    @props[:desc] = "Test Anything Protocol"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/tap")
    @props[:aliases] = ["tap"]
    @props[:filenames] = ["*.tap"]
    @props[:mimetypes] = ["text/x-tap", "application/x-tap"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/eiffel.rb", :Eiffel, "eiffel" do
    @props[:tag] = "eiffel"
    @props[:title] = "Eiffel"
    @props[:desc] = "Eiffel programming language"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/eiffel")
    @props[:aliases] = []
    @props[:filenames] = ["*.e"]
    @props[:mimetypes] = ["text/x-eiffel"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/cuda.rb", :CUDA, "cuda" do
    @props[:tag] = "cuda"
    @props[:title] = "CUDA"
    @props[:desc] = "Compute Unified Device Architecture, used for programming with NVIDIA GPU"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/cuda")
    @props[:aliases] = []
    @props[:filenames] = ["*.cu", "*.cuh"]
    @props[:mimetypes] = []
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/apple_script.rb", :AppleScript, "applescript" do
    @props[:tag] = "applescript"
    @props[:title] = "AppleScript"
    @props[:desc] = "The AppleScript scripting language by Apple Inc. (http://developer.apple.com/applescript/)"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/applescript")
    @props[:aliases] = ["applescript"]
    @props[:filenames] = ["*.applescript", "*.scpt"]
    @props[:mimetypes] = ["application/x-applescript"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/msgtrans.rb", :MsgTrans, "msgtrans" do
    @props[:tag] = "msgtrans"
    @props[:title] = "MessageTrans"
    @props[:desc] = "RISC OS message translator messages file"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/msgtrans")
    @props[:aliases] = []
    @props[:filenames] = ["Messages", "Message[0-9]", "Message[1-9][0-9]", "Message[1-9][0-9][0-9]"]
    @props[:mimetypes] = []
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/elixir.rb", :Elixir, "elixir" do
    @props[:tag] = "elixir"
    @props[:title] = "Elixir"
    @props[:desc] = "Elixir language (elixir-lang.org)"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/elixir")
    @props[:aliases] = ["elixir", "exs"]
    @props[:filenames] = ["*.ex", "*.exs"]
    @props[:mimetypes] = ["text/x-elixir", "application/x-elixir"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/apiblueprint.rb", :APIBlueprint, "apiblueprint" do
    @props[:tag] = "apiblueprint"
    @props[:title] = "API Blueprint"
    @props[:desc] = "Markdown based API description language."
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/apiblueprint")
    @props[:aliases] = ["apiblueprint", "apib"]
    @props[:filenames] = ["*.apib"]
    @props[:mimetypes] = ["text/vnd.apiblueprint"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/nginx.rb", :Nginx, "nginx" do
    @props[:tag] = "nginx"
    @props[:title] = "nginx"
    @props[:desc] = "configuration files for the nginx web server (nginx.org)"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/nginx")
    @props[:aliases] = []
    @props[:filenames] = ["nginx.conf"]
    @props[:mimetypes] = ["text/x-nginx-conf"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/magik.rb", :Magik, "magik" do
    @props[:tag] = "magik"
    @props[:title] = "Magik"
    @props[:desc] = "Smallworld Magik"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/magik")
    @props[:aliases] = []
    @props[:filenames] = ["*.magik"]
    @props[:mimetypes] = ["text/x-magik", "application/x-magik"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/twig.rb", :Twig, "twig" do
    @props[:tag] = "twig"
    @props[:title] = "Twig"
    @props[:desc] = "Twig template engine (twig.sensiolabs.org)"
    @props[:option_docs] = {"parent"=>"the parent language (default: html)"}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/twig")
    @props[:aliases] = []
    @props[:filenames] = ["*.twig"]
    @props[:mimetypes] = ["application/x-twig", "text/html+twig"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/nim.rb", :Nim, "nim" do
    @props[:tag] = "nim"
    @props[:title] = "Nim"
    @props[:desc] = "The Nim programming language (http://nim-lang.org/)"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/nim")
    @props[:aliases] = ["nimrod"]
    @props[:filenames] = ["*.nim"]
    @props[:mimetypes] = []
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/dart.rb", :Dart, "dart" do
    @props[:tag] = "dart"
    @props[:title] = "Dart"
    @props[:desc] = "The Dart programming language (dartlang.com)"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/dart")
    @props[:aliases] = []
    @props[:filenames] = ["*.dart"]
    @props[:mimetypes] = ["text/x-dart"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/freefem.rb", :FreeFEM, "freefem" do
    @props[:tag] = "freefem"
    @props[:title] = "FreeFEM"
    @props[:desc] = "The FreeFEM programming language (freefem.org)"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/freefem")
    @props[:aliases] = ["ff"]
    @props[:filenames] = ["*.edp", "*.idp"]
    @props[:mimetypes] = ["text/x-ffhdr", "text/x-ffsrc"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/d.rb", :D, "d" do
    @props[:tag] = "d"
    @props[:title] = "D"
    @props[:desc] = "The D programming language(dlang.org)"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/d")
    @props[:aliases] = ["dlang"]
    @props[:filenames] = ["*.d", "*.di"]
    @props[:mimetypes] = ["application/x-dsrc", "text/x-dsrc"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/sass.rb", :Sass, "sass" do
    @props[:tag] = "sass"
    @props[:title] = "Sass"
    @props[:desc] = "The Sass stylesheet language language (sass-lang.com)"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/sass")
    @props[:aliases] = []
    @props[:filenames] = ["*.sass"]
    @props[:mimetypes] = ["text/x-sass"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/pony.rb", :Pony, "pony" do
    @props[:tag] = "pony"
    @props[:title] = "Pony"
    @props[:desc] = nil
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/pony")
    @props[:aliases] = []
    @props[:filenames] = ["*.pony"]
    @props[:mimetypes] = []
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/matlab.rb", :Matlab, "matlab" do
    @props[:tag] = "matlab"
    @props[:title] = "MATLAB"
    @props[:desc] = "Matlab"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/matlab")
    @props[:aliases] = ["m"]
    @props[:filenames] = ["*.m"]
    @props[:mimetypes] = ["text/x-matlab", "application/x-matlab"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/ruby.rb", :Ruby, "ruby" do
    @props[:tag] = "ruby"
    @props[:title] = "Ruby"
    @props[:desc] = "The Ruby programming language (ruby-lang.org)"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/ruby")
    @props[:aliases] = ["rb"]
    @props[:filenames] = ["*.rb", "*.ruby", "*.rbw", "*.rake", "*.gemspec", "*.podspec", "Rakefile", "Guardfile", "Gemfile", "Capfile", "Podfile", "Vagrantfile", "*.ru", "*.prawn", "Berksfile", "*.arb", "Dangerfile", "Fastfile", "Deliverfile", "Appfile"]
    @props[:mimetypes] = ["text/x-ruby", "application/x-ruby"]
      def self.detect?(text)
        return true if text.shebang? 'ruby'
      end
    @props[:detectable?] = true
  end

  Lexer.cache "./lib/rouge/lexers/irb.rb", :IRBOutputLexer, "irb_output" do
    @props[:tag] = "irb_output"
    @props[:title] = "Irb_output"
    @props[:desc] = nil
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/irb_output")
    @props[:aliases] = []
    @props[:filenames] = []
    @props[:mimetypes] = []
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/json_doc.rb", :JSONDOC, "json-doc" do
    @props[:tag] = "json-doc"
    @props[:title] = "Json-doc"
    @props[:desc] = "JavaScript Object Notation with extensions for documentation"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/json-doc")
    @props[:aliases] = []
    @props[:filenames] = []
    @props[:mimetypes] = []
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/fsharp.rb", :FSharp, "fsharp" do
    @props[:tag] = "fsharp"
    @props[:title] = "FSharp"
    @props[:desc] = "F# (fsharp.net)"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/fsharp")
    @props[:aliases] = []
    @props[:filenames] = ["*.fs", "*.fsi", "*.fsx"]
    @props[:mimetypes] = ["application/fsharp-script", "text/x-fsharp", "text/x-fsi"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/xml.rb", :XML, "xml" do
    @props[:tag] = "xml"
    @props[:title] = "XML"
    @props[:desc] = "<desc for=\"this-lexer\">XML</desc>"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/xml")
    @props[:aliases] = []
    @props[:filenames] = ["*.xml", "*.xsl", "*.rss", "*.xslt", "*.xsd", "*.wsdl", "*.svg", "*.plist"]
    @props[:mimetypes] = ["text/xml", "application/xml", "image/svg+xml", "application/rss+xml", "application/atom+xml"]
      def self.detect?(text)
        return false if text.doctype?(/html/)
        return true if text =~ /\A<\?xml\b/
        return true if text.doctype?
      end
    @props[:detectable?] = true
  end

  Lexer.cache "./lib/rouge/lexers/mathematica.rb", :Mathematica, "mathematica" do
    @props[:tag] = "mathematica"
    @props[:title] = "Mathematica"
    @props[:desc] = "Wolfram Mathematica, the world's definitive system for modern technical computing."
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/mathematica")
    @props[:aliases] = ["wl"]
    @props[:filenames] = ["*.m", "*.wl"]
    @props[:mimetypes] = ["application/vnd.wolfram.mathematica.package", "application/vnd.wolfram.wl"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/cpp.rb", :Cpp, "cpp" do
    @props[:tag] = "cpp"
    @props[:title] = "C++"
    @props[:desc] = "The C++ programming language"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/cpp")
    @props[:aliases] = ["c++", "c++"]
    @props[:filenames] = ["*.cpp", "*.hpp", "*.c++", "*.h++", "*.cc", "*.hh", "*.cxx", "*.hxx", "*.pde", "*.ino", "*.tpp", "*.h", "*.cpp", "*.hpp", "*.c++", "*.h++", "*.cc", "*.hh", "*.cxx", "*.hxx", "*.pde", "*.ino", "*.tpp", "*.h"]
    @props[:mimetypes] = ["text/x-c++hdr", "text/x-c++src", "text/x-c++hdr", "text/x-c++src"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/docker.rb", :Docker, "docker" do
    @props[:tag] = "docker"
    @props[:title] = "Docker"
    @props[:desc] = "Dockerfile syntax"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/docker")
    @props[:aliases] = ["dockerfile"]
    @props[:filenames] = ["Dockerfile", "*.Dockerfile", "*.docker", "Dockerfile_*"]
    @props[:mimetypes] = ["text/x-dockerfile-config"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/verilog.rb", :Verilog, "verilog" do
    @props[:tag] = "verilog"
    @props[:title] = "Verilog and System Verilog"
    @props[:desc] = "The System Verilog hardware description language"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/verilog")
    @props[:aliases] = []
    @props[:filenames] = ["*.v", "*.sv", "*.svh"]
    @props[:mimetypes] = ["text/x-verilog", "text/x-systemverilog"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/smarty.rb", :Smarty, "smarty" do
    @props[:tag] = "smarty"
    @props[:title] = "Smarty"
    @props[:desc] = "Smarty Template Engine"
    @props[:option_docs] = {"parent"=>"the parent language (default: html)"}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/smarty")
    @props[:aliases] = ["smarty"]
    @props[:filenames] = ["*.tpl", "*.smarty"]
    @props[:mimetypes] = ["application/x-smarty", "text/x-smarty"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/digdag.rb", :Digdag, "digdag" do
    @props[:tag] = "digdag"
    @props[:title] = "digdag"
    @props[:desc] = "A simple, open source, multi-cloud workflow engine (https://www.digdag.io/)"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/digdag")
    @props[:aliases] = []
    @props[:filenames] = ["*.dig"]
    @props[:mimetypes] = ["application/x-digdag"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/erb.rb", :ERB, "erb" do
    @props[:tag] = "erb"
    @props[:title] = "ERB"
    @props[:desc] = "Embedded ruby template files"
    @props[:option_docs] = {"parent"=>"the parent language (default: html)"}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/erb")
    @props[:aliases] = ["eruby", "rhtml"]
    @props[:filenames] = ["*.erb", "*.erubis", "*.rhtml", "*.eruby"]
    @props[:mimetypes] = []
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/jinja.rb", :Jinja, "jinja" do
    @props[:tag] = "jinja"
    @props[:title] = "Jinja"
    @props[:desc] = "Django/Jinja template engine (jinja.pocoo.org)"
    @props[:option_docs] = {"parent"=>"the parent language (default: html)"}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/jinja")
    @props[:aliases] = ["django", "django"]
    @props[:filenames] = []
    @props[:mimetypes] = ["application/x-django-templating", "application/x-jinja", "text/html+django", "text/html+jinja", "application/x-django-templating", "application/x-jinja", "text/html+django", "text/html+jinja"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/slim.rb", :Slim, "slim" do
    @props[:tag] = "slim"
    @props[:title] = "Slim"
    @props[:desc] = "The Slim template language"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/slim")
    @props[:aliases] = []
    @props[:filenames] = ["*.slim"]
    @props[:mimetypes] = []
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/awk.rb", :Awk, "awk" do
    @props[:tag] = "awk"
    @props[:title] = "Awk"
    @props[:desc] = "pattern-directed scanning and processing language"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/awk")
    @props[:aliases] = []
    @props[:filenames] = ["*.awk"]
    @props[:mimetypes] = ["application/x-awk"]
      def self.detect?(text)
        return true if text.shebang?('awk')
      end
    @props[:detectable?] = true
  end

  Lexer.cache "./lib/rouge/lexers/vhdl.rb", :VHDL, "vhdl" do
    @props[:tag] = "vhdl"
    @props[:title] = "VHDL 2008"
    @props[:desc] = "Very High Speed Integrated Circuit Hardware Description Language"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/vhdl")
    @props[:aliases] = []
    @props[:filenames] = ["*.vhd", "*.vhdl", "*.vho"]
    @props[:mimetypes] = ["text/x-vhdl"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/bsl.rb", :Bsl, "bsl" do
    @props[:tag] = "bsl"
    @props[:title] = "1C (BSL)"
    @props[:desc] = "The 1C:Enterprise programming language"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/bsl")
    @props[:aliases] = []
    @props[:filenames] = ["*.bsl", "*.os"]
    @props[:mimetypes] = []
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/hack.rb", :Hack, "hack" do
    @props[:tag] = "hack"
    @props[:title] = "Hack"
    @props[:desc] = "The Hack programming language (hacklang.org)"
    @props[:option_docs] = {"parent"=>"the parent language (default: html)", "start_inline"=>"Whether to start with inline php or require <?php ... ?>. (default: best guess)", "funcnamehighlighting"=>"Whether to highlight builtin functions (default: true)", "disabledmodules"=>"Disable certain modules from being highlighted as builtins (default: empty)"}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/hack")
    @props[:aliases] = ["hack", "hh"]
    @props[:filenames] = ["*.php", "*.hh"]
    @props[:mimetypes] = []
      def self.detect?(text)
        return true if /<\?hh/ =~ text
        return true if text.shebang?('hhvm')
        return true if /async function [a-zA-Z]/ =~ text
        return true if /\): Awaitable</ =~ text

        return false
      end
    @props[:detectable?] = true
  end

  Lexer.cache "./lib/rouge/lexers/apache.rb", :Apache, "apache" do
    @props[:tag] = "apache"
    @props[:title] = "Apache"
    @props[:desc] = "configuration files for Apache web server"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/apache")
    @props[:aliases] = []
    @props[:filenames] = [".htaccess", "httpd.conf"]
    @props[:mimetypes] = ["text/x-httpd-conf", "text/x-apache-conf"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/jsx.rb", :JSX, "jsx" do
    @props[:tag] = "jsx"
    @props[:title] = "JSX"
    @props[:desc] = "React JSX (https://facebook.github.io/react/)"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/jsx")
    @props[:aliases] = ["jsx", "react"]
    @props[:filenames] = ["*.jsx"]
    @props[:mimetypes] = ["text/x-jsx", "application/x-jsx"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/prolog.rb", :Prolog, "prolog" do
    @props[:tag] = "prolog"
    @props[:title] = "Prolog"
    @props[:desc] = "The Prolog programming language (http://en.wikipedia.org/wiki/Prolog)"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/prolog")
    @props[:aliases] = ["prolog"]
    @props[:filenames] = ["*.pro", "*.P", "*.prolog", "*.pl"]
    @props[:mimetypes] = ["text/x-prolog"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/jsonnet.rb", :Jsonnet, "jsonnet" do
    @props[:tag] = "jsonnet"
    @props[:title] = "Jsonnet"
    @props[:desc] = "An elegant, formally-specified config language for JSON"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/jsonnet")
    @props[:aliases] = []
    @props[:filenames] = ["*.jsonnet", "*.libsonnet"]
    @props[:mimetypes] = ["text/x-jsonnet"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/ceylon.rb", :Ceylon, "ceylon" do
    @props[:tag] = "ceylon"
    @props[:title] = "Ceylon"
    @props[:desc] = "Say more, more clearly."
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/ceylon")
    @props[:aliases] = []
    @props[:filenames] = ["*.ceylon"]
    @props[:mimetypes] = ["text/x-ceylon"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/powershell.rb", :Powershell, "powershell" do
    @props[:tag] = "powershell"
    @props[:title] = "powershell"
    @props[:desc] = "powershell"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/powershell")
    @props[:aliases] = ["posh", "microsoftshell", "msshell"]
    @props[:filenames] = ["*.ps1", "*.psm1", "*.psd1", "*.psrc", "*.pssc"]
    @props[:mimetypes] = ["text/x-powershell"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/cfscript.rb", :Cfscript, "cfscript" do
    @props[:tag] = "cfscript"
    @props[:title] = "CFScript"
    @props[:desc] = "CFScript, the CFML scripting language"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/cfscript")
    @props[:aliases] = ["cfc"]
    @props[:filenames] = ["*.cfc"]
    @props[:mimetypes] = []
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/liquid.rb", :Liquid, "liquid" do
    @props[:tag] = "liquid"
    @props[:title] = "Liquid"
    @props[:desc] = "Liquid is a templating engine for Ruby (liquidmarkup.org)"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/liquid")
    @props[:aliases] = []
    @props[:filenames] = ["*.liquid"]
    @props[:mimetypes] = []
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/moonscript.rb", :Moonscript, "moonscript" do
    @props[:tag] = "moonscript"
    @props[:title] = "MoonScript"
    @props[:desc] = "Moonscript (http://www.moonscript.org)"
    @props[:option_docs] = {"function_highlighting"=>"Whether to highlight builtin functions (default: true)", "disabled_modules"=>"builtin modules to disable"}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/moonscript")
    @props[:aliases] = ["moon"]
    @props[:filenames] = ["*.moon"]
    @props[:mimetypes] = ["text/x-moonscript", "application/x-moonscript"]
      def self.detect?(text)
        return true if text.shebang? 'moon'
      end
    @props[:detectable?] = true
  end

  Lexer.cache "./lib/rouge/lexers/perl.rb", :Perl, "perl" do
    @props[:tag] = "perl"
    @props[:title] = "Perl"
    @props[:desc] = "The Perl scripting language (perl.org)"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/perl")
    @props[:aliases] = ["pl"]
    @props[:filenames] = ["*.pl", "*.pm", "*.t"]
    @props[:mimetypes] = ["text/x-perl", "application/x-perl"]
      def self.detect?(text)
        return true if text.shebang? 'perl'
      end
    @props[:detectable?] = true
  end

  Lexer.cache "./lib/rouge/lexers/typescript.rb", :Typescript, "typescript" do
    @props[:tag] = "typescript"
    @props[:title] = "TypeScript"
    @props[:desc] = "TypeScript, a superset of JavaScript"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/typescript")
    @props[:aliases] = ["ts"]
    @props[:filenames] = ["*.ts", "*.d.ts"]
    @props[:mimetypes] = ["text/typescript"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/sed.rb", :Sed, "sed" do
    @props[:tag] = "sed"
    @props[:title] = "sed"
    @props[:desc] = "sed, the ultimate stream editor"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/sed")
    @props[:aliases] = []
    @props[:filenames] = ["*.sed"]
    @props[:mimetypes] = ["text/x-sed"]
      def self.detect?(text)
        return true if text.shebang? 'sed'
      end
    @props[:detectable?] = true
  end

  Lexer.cache "./lib/rouge/lexers/mosel.rb", :Mosel, "mosel" do
    @props[:tag] = "mosel"
    @props[:title] = "Mosel"
    @props[:desc] = "An optimization language used by Fico's Xpress."
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/mosel")
    @props[:aliases] = []
    @props[:filenames] = ["*.mos", "*.mos"]
    @props[:mimetypes] = ["text/x-mosel"]
      def self.detect?(text)
        return true if text =~ /^\s*(model|package)\s+/
      end
    @props[:detectable?] = true
  end

  Lexer.cache "./lib/rouge/lexers/minizinc.rb", :MiniZinc, "minizinc" do
    @props[:tag] = "minizinc"
    @props[:title] = "MiniZinc"
    @props[:desc] = "MiniZinc is a free and open-source constraint modeling language (minizinc.org)"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/minizinc")
    @props[:aliases] = []
    @props[:filenames] = ["*.mzn", "*.fzn", "*.dzn"]
    @props[:mimetypes] = ["text/minizinc"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/cmake.rb", :CMake, "cmake" do
    @props[:tag] = "cmake"
    @props[:title] = "CMake"
    @props[:desc] = "The cross-platform, open-source build system"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/cmake")
    @props[:aliases] = []
    @props[:filenames] = ["CMakeLists.txt", "*.cmake"]
    @props[:mimetypes] = ["text/x-cmake"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/smalltalk.rb", :Smalltalk, "smalltalk" do
    @props[:tag] = "smalltalk"
    @props[:title] = "Smalltalk"
    @props[:desc] = "The Smalltalk programming language"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/smalltalk")
    @props[:aliases] = ["st", "squeak"]
    @props[:filenames] = ["*.st"]
    @props[:mimetypes] = ["text/x-smalltalk"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/nesasm.rb", :NesAsm, "nesasm" do
    @props[:tag] = "nesasm"
    @props[:title] = "NesAsm"
    @props[:desc] = "Nesasm3 assembly (6502 asm)"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/nesasm")
    @props[:aliases] = ["nes"]
    @props[:filenames] = ["*.nesasm"]
    @props[:mimetypes] = []
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/io.rb", :IO, "io" do
    @props[:tag] = "io"
    @props[:title] = "Io"
    @props[:desc] = "The IO programming language (http://iolanguage.com)"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/io")
    @props[:aliases] = []
    @props[:filenames] = ["*.io"]
    @props[:mimetypes] = ["text/x-iosrc"]
      def self.detect?(text)
        return true if text.shebang? 'io'
      end
    @props[:detectable?] = true
  end

  Lexer.cache "./lib/rouge/lexers/shell.rb", :Shell, "shell" do
    @props[:tag] = "shell"
    @props[:title] = "shell"
    @props[:desc] = "Various shell languages, including sh and bash"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/shell")
    @props[:aliases] = ["bash", "zsh", "ksh", "sh"]
    @props[:filenames] = ["*.sh", "*.bash", "*.zsh", "*.ksh", ".bashrc", ".zshrc", ".kshrc", ".profile", "APKBUILD", "PKGBUILD", "*.ebuild", "*.eclass", "*.exheres-0", "*.exlib"]
    @props[:mimetypes] = ["application/x-sh", "application/x-shellscript", "text/x-sh", "text/x-shellscript"]
      def self.detect?(text)
        return true if text.shebang?(/(ba|z|k)?sh/)
      end
    @props[:detectable?] = true
  end

  Lexer.cache "./lib/rouge/lexers/html.rb", :HTML, "html" do
    @props[:tag] = "html"
    @props[:title] = "HTML"
    @props[:desc] = "HTML, the markup language of the web"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/html")
    @props[:aliases] = []
    @props[:filenames] = ["*.htm", "*.html", "*.xhtml", "*.htm", "*.html", "*.xhtml"]
    @props[:mimetypes] = ["text/html", "application/xhtml+xml", "text/html", "application/xhtml+xml"]
      def self.detect?(text)
        return true if text.doctype?(/\bhtml\b/i)
        return false if text =~ /\A<\?xml\b/
        return true if text =~ /<\s*html\b/
      end
    @props[:detectable?] = true
  end

  Lexer.cache "./lib/rouge/lexers/gdscript.rb", :GDScript, "gdscript" do
    @props[:tag] = "gdscript"
    @props[:title] = "GDScript"
    @props[:desc] = "The Godot Engine programming language (https://godotengine.org/)"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/gdscript")
    @props[:aliases] = ["gd", "gdscript"]
    @props[:filenames] = ["*.gd"]
    @props[:mimetypes] = ["text/x-gdscript", "application/x-gdscript"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/objective_c.rb", :ObjectiveC, "objective_c" do
    @props[:tag] = "objective_c"
    @props[:title] = "Objective-C"
    @props[:desc] = "an extension of C commonly used to write Apple software"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/objective_c")
    @props[:aliases] = ["objc", "obj-c", "obj_c", "objectivec"]
    @props[:filenames] = ["*.m", "*.h"]
    @props[:mimetypes] = ["text/x-objective_c", "application/x-objective_c"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/conf.rb", :Conf, "conf" do
    @props[:tag] = "conf"
    @props[:title] = "Config File"
    @props[:desc] = "A generic lexer for configuration files"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/conf")
    @props[:aliases] = ["config", "configuration"]
    @props[:filenames] = ["*.conf", "*.config"]
    @props[:mimetypes] = []
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/sieve.rb", :Sieve, "sieve" do
    @props[:tag] = "sieve"
    @props[:title] = "Sieve"
    @props[:desc] = "mail filtering language"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/sieve")
    @props[:aliases] = []
    @props[:filenames] = ["*.sieve"]
    @props[:mimetypes] = []
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/haml.rb", :Haml, "haml" do
    @props[:tag] = "haml"
    @props[:title] = "Haml"
    @props[:desc] = "The Haml templating system for Ruby (haml.info)"
    @props[:option_docs] = {"filters[filter_name]"=>"Mapping of lexers to use for haml :filters"}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/haml")
    @props[:aliases] = ["HAML"]
    @props[:filenames] = ["*.haml"]
    @props[:mimetypes] = ["text/x-haml"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/epp.rb", :EPP, "epp" do
    @props[:tag] = "epp"
    @props[:title] = "EPP"
    @props[:desc] = "Embedded Puppet template files"
    @props[:option_docs] = {"parent"=>"the parent language (default: html)"}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/epp")
    @props[:aliases] = []
    @props[:filenames] = ["*.epp"]
    @props[:mimetypes] = []
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/armasm.rb", :ArmAsm, "armasm" do
    @props[:tag] = "armasm"
    @props[:title] = "ArmAsm"
    @props[:desc] = "Arm assembly syntax"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/armasm")
    @props[:aliases] = []
    @props[:filenames] = ["*.s"]
    @props[:mimetypes] = []
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/clean.rb", :Clean, "clean" do
    @props[:tag] = "clean"
    @props[:title] = "Clean"
    @props[:desc] = "The Clean programming language (clean.cs.ru.nl)"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/clean")
    @props[:aliases] = []
    @props[:filenames] = ["*.dcl", "*.icl"]
    @props[:mimetypes] = []
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/nix.rb", :Nix, "nix" do
    @props[:tag] = "nix"
    @props[:title] = "Nix"
    @props[:desc] = "The Nix expression language (https://nixos.org/nix/manual/#ch-expression-language)"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/nix")
    @props[:aliases] = ["nixos"]
    @props[:filenames] = ["*.nix"]
    @props[:mimetypes] = []
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/handlebars.rb", :Handlebars, "handlebars" do
    @props[:tag] = "handlebars"
    @props[:title] = "Handlebars"
    @props[:desc] = "the Handlebars and Mustache templating languages"
    @props[:option_docs] = {"parent"=>"the parent language (default: html)"}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/handlebars")
    @props[:aliases] = ["hbs", "mustache"]
    @props[:filenames] = ["*.handlebars", "*.hbs", "*.mustache"]
    @props[:mimetypes] = ["text/x-handlebars", "text/x-mustache"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/vb.rb", :VisualBasic, "vb" do
    @props[:tag] = "vb"
    @props[:title] = "Visual Basic"
    @props[:desc] = "Visual Basic"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/vb")
    @props[:aliases] = ["visualbasic"]
    @props[:filenames] = ["*.vbs", "*.vb"]
    @props[:mimetypes] = ["text/x-visualbasic", "application/x-visualbasic"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/erlang.rb", :Erlang, "erlang" do
    @props[:tag] = "erlang"
    @props[:title] = "Erlang"
    @props[:desc] = "The Erlang programming language (erlang.org)"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/erlang")
    @props[:aliases] = ["erl"]
    @props[:filenames] = ["*.erl", "*.hrl"]
    @props[:mimetypes] = ["text/x-erlang", "application/x-erlang"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/tulip.rb", :Tulip, "tulip" do
    @props[:tag] = "tulip"
    @props[:title] = "Tulip"
    @props[:desc] = "the tulip programming language (twitter.com/tuliplang)"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/tulip")
    @props[:aliases] = ["tulip"]
    @props[:filenames] = ["*.tlp"]
    @props[:mimetypes] = ["text/x-tulip", "application/x-tulip"]
      def self.detect?(text)
        return true if text.shebang? 'tulip'
      end
    @props[:detectable?] = true
  end

  Lexer.cache "./lib/rouge/lexers/ocaml.rb", :OCaml, "ocaml" do
    @props[:tag] = "ocaml"
    @props[:title] = "OCaml"
    @props[:desc] = "Objective Caml (ocaml.org)"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/ocaml")
    @props[:aliases] = []
    @props[:filenames] = ["*.ml", "*.mli", "*.mll", "*.mly"]
    @props[:mimetypes] = ["text/x-ocaml"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/terraform.rb", :Terraform, "terraform" do
    @props[:tag] = "terraform"
    @props[:title] = "Terraform"
    @props[:desc] = "Terraform HCL Interpolations"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/terraform")
    @props[:aliases] = ["tf"]
    @props[:filenames] = ["*.tf"]
    @props[:mimetypes] = []
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/mxml.rb", :MXML, "mxml" do
    @props[:tag] = "mxml"
    @props[:title] = "MXML"
    @props[:desc] = "MXML"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/mxml")
    @props[:aliases] = []
    @props[:filenames] = ["*.mxml"]
    @props[:mimetypes] = ["application/xv+xml"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/igorpro.rb", :IgorPro, "igorpro" do
    @props[:tag] = "igorpro"
    @props[:title] = "IgorPro"
    @props[:desc] = "WaveMetrics Igor Pro"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/igorpro")
    @props[:aliases] = []
    @props[:filenames] = ["*.ipf"]
    @props[:mimetypes] = ["text/x-igorpro"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/hcl.rb", :Hcl, "hcl" do
    @props[:tag] = "hcl"
    @props[:title] = "Hashicorp Configuration Language"
    @props[:desc] = "Hashicorp Configuration Language, used by Terraform and other Hashicorp tools"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/hcl")
    @props[:aliases] = []
    @props[:filenames] = []
    @props[:mimetypes] = []
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/ttcn3.rb", :TTCN3, "ttcn3" do
    @props[:tag] = "ttcn3"
    @props[:title] = "TTCN3"
    @props[:desc] = "The TTCN3 programming language (ttcn-3.org)"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/ttcn3")
    @props[:aliases] = []
    @props[:filenames] = ["*.ttcn", "*.ttcn3"]
    @props[:mimetypes] = ["text/x-ttcn3", "text/x-ttcn"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/supercollider.rb", :SuperCollider, "supercollider" do
    @props[:tag] = "supercollider"
    @props[:title] = "SuperCollider"
    @props[:desc] = "A cross-platform interpreted programming language for sound synthesis, algorithmic composition, and realtime performance"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/supercollider")
    @props[:aliases] = []
    @props[:filenames] = ["*.sc", "*.scd"]
    @props[:mimetypes] = []
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/literate_haskell.rb", :LiterateHaskell, "literate_haskell" do
    @props[:tag] = "literate_haskell"
    @props[:title] = "Literate Haskell"
    @props[:desc] = "Literate haskell"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/literate_haskell")
    @props[:aliases] = ["lithaskell", "lhaskell", "lhs"]
    @props[:filenames] = ["*.lhs"]
    @props[:mimetypes] = ["text/x-literate-haskell"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/hylang.rb", :HyLang, "hylang" do
    @props[:tag] = "hylang"
    @props[:title] = "HyLang"
    @props[:desc] = "The HyLang programming language (hylang.org)"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/hylang")
    @props[:aliases] = ["hy"]
    @props[:filenames] = ["*.hy"]
    @props[:mimetypes] = ["text/x-hy", "application/x-hy"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/xquery.rb", :XQuery, "xquery" do
    @props[:tag] = "xquery"
    @props[:title] = "XQuery"
    @props[:desc] = "XQuery 3.1: An XML Query Language"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/xquery")
    @props[:aliases] = []
    @props[:filenames] = ["*.xquery", "*.xq"]
    @props[:mimetypes] = ["application/xquery"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/properties.rb", :Properties, "properties" do
    @props[:tag] = "properties"
    @props[:title] = ".properties"
    @props[:desc] = ".properties config files for Java"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/properties")
    @props[:aliases] = []
    @props[:filenames] = ["*.properties"]
    @props[:mimetypes] = ["text/x-java-properties"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/reasonml.rb", :ReasonML, "reasonml" do
    @props[:tag] = "reasonml"
    @props[:title] = "ReasonML"
    @props[:desc] = "New syntax on top of OCaml ecosystem (reasonml.github.io)"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/reasonml")
    @props[:aliases] = []
    @props[:filenames] = ["*.re", "*.rei"]
    @props[:mimetypes] = ["text/x-reasonml"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/tsx.rb", :TSX, "tsx" do
    @props[:tag] = "tsx"
    @props[:title] = "TypeScript"
    @props[:desc] = "tsx"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/tsx")
    @props[:aliases] = []
    @props[:filenames] = ["*.tsx"]
    @props[:mimetypes] = []
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/tex.rb", :TeX, "tex" do
    @props[:tag] = "tex"
    @props[:title] = "TeX"
    @props[:desc] = "The TeX typesetting system"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/tex")
    @props[:aliases] = ["TeX", "LaTeX", "latex"]
    @props[:filenames] = ["*.tex", "*.aux", "*.toc", "*.sty", "*.cls"]
    @props[:mimetypes] = ["text/x-tex", "text/x-latex"]
      def self.detect?(text)
        return true if text =~ /\A\s*\\(documentclass|input|documentstyle|relax|ProvidesPackage|ProvidesClass)/
      end
    @props[:detectable?] = true
  end

  Lexer.cache "./lib/rouge/lexers/r.rb", :R, "r" do
    @props[:tag] = "r"
    @props[:title] = "R"
    @props[:desc] = "The R statistics language (r-project.org)"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/r")
    @props[:aliases] = ["r", "R", "s", "S"]
    @props[:filenames] = ["*.R", "*.r", ".Rhistory", ".Rprofile"]
    @props[:mimetypes] = ["text/x-r-source", "text/x-r", "text/x-R", "text/x-r", "application/x-r"]
      def self.detect?(text)
        return true if text.shebang? 'Rscript'
      end
    @props[:detectable?] = true
  end

  Lexer.cache "./lib/rouge/lexers/openedge.rb", :OpenEdge, "openedge" do
    @props[:tag] = "openedge"
    @props[:title] = "OpenEdge ABL"
    @props[:desc] = "The OpenEdge ABL programming language"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/openedge")
    @props[:aliases] = []
    @props[:filenames] = ["*.w", "*.i"]
    @props[:mimetypes] = ["text/x-openedge"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/slice.rb", :Slice, "slice" do
    @props[:tag] = "slice"
    @props[:title] = "Slice"
    @props[:desc] = "Specification Language for Ice (doc.zeroc.com)"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/slice")
    @props[:aliases] = []
    @props[:filenames] = ["*.ice"]
    @props[:mimetypes] = ["text/slice"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/sparql.rb", :SPARQL, "sparql" do
    @props[:tag] = "sparql"
    @props[:title] = "SPARQL"
    @props[:desc] = "Semantic Query Language, for RDF data"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/sparql")
    @props[:aliases] = []
    @props[:filenames] = ["*.rq"]
    @props[:mimetypes] = ["application/sparql-query"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/java.rb", :Java, "java" do
    @props[:tag] = "java"
    @props[:title] = "Java"
    @props[:desc] = "The Java programming language (java.com)"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/java")
    @props[:aliases] = []
    @props[:filenames] = ["*.java"]
    @props[:mimetypes] = ["text/x-java"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/glsl.rb", :Glsl, "glsl" do
    @props[:tag] = "glsl"
    @props[:title] = "GLSL"
    @props[:desc] = "The GLSL shader language"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/glsl")
    @props[:aliases] = []
    @props[:filenames] = ["*.glsl", "*.frag", "*.vert", "*.geom", "*.vs", "*.gs", "*.shader"]
    @props[:mimetypes] = ["x-shader/x-vertex", "x-shader/x-fragment", "x-shader/x-geometry"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/ada.rb", :Ada, "ada" do
    @props[:tag] = "ada"
    @props[:title] = "Ada"
    @props[:desc] = "The Ada 2012 programming language"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/ada")
    @props[:aliases] = []
    @props[:filenames] = ["*.ada", "*.ads", "*.adb", "*.gpr"]
    @props[:mimetypes] = ["text/x-ada"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/common_lisp.rb", :CommonLisp, "common_lisp" do
    @props[:tag] = "common_lisp"
    @props[:title] = "Common Lisp"
    @props[:desc] = "The Common Lisp variant of Lisp (common-lisp.net)"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/common_lisp")
    @props[:aliases] = ["cl", "common-lisp", "elisp", "emacs-lisp", "lisp"]
    @props[:filenames] = ["*.cl", "*.lisp", "*.asd", "*.el"]
    @props[:mimetypes] = ["text/x-common-lisp"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/lua.rb", :Lua, "lua" do
    @props[:tag] = "lua"
    @props[:title] = "Lua"
    @props[:desc] = "Lua (http://www.lua.org)"
    @props[:option_docs] = {"function_highlighting"=>"Whether to highlight builtin functions (default: true)", "disabled_modules"=>"builtin modules to disable"}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/lua")
    @props[:aliases] = []
    @props[:filenames] = ["*.lua", "*.wlua", "*.lua", "*.wlua"]
    @props[:mimetypes] = ["text/x-lua", "application/x-lua", "text/x-lua", "application/x-lua"]
      def self.detect?(text)
        return true if text.shebang? 'lua'
      end
    @props[:detectable?] = true
  end

  Lexer.cache "./lib/rouge/lexers/biml.rb", :BIML, "biml" do
    @props[:tag] = "biml"
    @props[:title] = "BIML"
    @props[:desc] = "BIML, Business Intelligence Markup Language"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/biml")
    @props[:aliases] = []
    @props[:filenames] = ["*.biml"]
    @props[:mimetypes] = []
      def self.detect?(text)
        return true if text =~ /<\s*Biml\b/
      end
    @props[:detectable?] = true
  end

  Lexer.cache "./lib/rouge/lexers/cython.rb", :Cython, "cython" do
    @props[:tag] = "cython"
    @props[:title] = "Cython"
    @props[:desc] = "Cython and Pyrex source code (cython.org)"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/cython")
    @props[:aliases] = ["pyx", "pyrex"]
    @props[:filenames] = ["*.pyx", "*.pxd", "*.pxi"]
    @props[:mimetypes] = ["text/x-cython", "application/x-cython"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/graphql.rb", :GraphQL, "graphql" do
    @props[:tag] = "graphql"
    @props[:title] = "Graphql"
    @props[:desc] = "GraphQL"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/graphql")
    @props[:aliases] = []
    @props[:filenames] = ["*.graphql", "*.gql"]
    @props[:mimetypes] = ["application/graphql"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/hocon.rb", :HOCON, "hocon" do
    @props[:tag] = "hocon"
    @props[:title] = "HOCON"
    @props[:desc] = "Human-Optimized Config Object Notation (https://github.com/lightbend/config)"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/hocon")
    @props[:aliases] = []
    @props[:filenames] = ["*.hocon"]
    @props[:mimetypes] = []
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/sml.rb", :SML, "sml" do
    @props[:tag] = "sml"
    @props[:title] = "SML"
    @props[:desc] = "Standard ML"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/sml")
    @props[:aliases] = ["ml"]
    @props[:filenames] = ["*.sml", "*.sig", "*.fun"]
    @props[:mimetypes] = ["text/x-standardml", "application/x-standardml"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/objective_cpp.rb", :ObjectiveCpp, "objective_cpp" do
    @props[:tag] = "objective_cpp"
    @props[:title] = "Objective-C++"
    @props[:desc] = "an extension of C++ uncommonly used to write Apple software"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/objective_cpp")
    @props[:aliases] = ["objcpp", "obj-cpp", "obj_cpp", "objectivecpp", "objc++", "obj-c++", "obj_c++", "objectivec++"]
    @props[:filenames] = ["*.mm", "*.h"]
    @props[:mimetypes] = ["text/x-objective-c++", "application/x-objective-c++"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/bpf.rb", :BPF, "bpf" do
    @props[:tag] = "bpf"
    @props[:title] = "BPF"
    @props[:desc] = "BPF bytecode syntax"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/bpf")
    @props[:aliases] = []
    @props[:filenames] = []
    @props[:mimetypes] = []
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/plist.rb", :Plist, "plist" do
    @props[:tag] = "plist"
    @props[:title] = "Plist"
    @props[:desc] = "plist"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/plist")
    @props[:aliases] = ["plist"]
    @props[:filenames] = ["*.plist", "*.pbxproj"]
    @props[:mimetypes] = ["text/x-plist", "application/x-plist"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/escape.rb", :Escape, "escape" do
    @props[:tag] = "escape"
    @props[:title] = "Escape"
    @props[:desc] = "A generic lexer for including escaped content - see Formatter.enable_escape!"
    @props[:option_docs] = {"start"=>"the beginning of the escaped section, default \"<!\"", "end"=>"the end of the escaped section, e.g. \"!>\"", "lang"=>"the language to lex in unescaped sections"}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/escape")
    @props[:aliases] = ["esc"]
    @props[:filenames] = []
    @props[:mimetypes] = []
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/crystal.rb", :Crystal, "crystal" do
    @props[:tag] = "crystal"
    @props[:title] = "Crystal"
    @props[:desc] = "Crystal The Programming Language (crystal-lang.org)"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/crystal")
    @props[:aliases] = ["cr"]
    @props[:filenames] = ["*.cr"]
    @props[:mimetypes] = ["text/x-crystal", "application/x-crystal"]
      def self.detect?(text)
        return true if text.shebang? 'crystal'
      end
    @props[:detectable?] = true
  end

  Lexer.cache "./lib/rouge/lexers/apex.rb", :Apex, "apex" do
    @props[:tag] = "apex"
    @props[:title] = "Apex"
    @props[:desc] = "The Apex programming language (provided by salesforce)"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/apex")
    @props[:aliases] = []
    @props[:filenames] = ["*.cls"]
    @props[:mimetypes] = ["text/x-apex"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/console.rb", :ConsoleLexer, "console" do
    @props[:tag] = "console"
    @props[:title] = "Console"
    @props[:desc] = "A generic lexer for shell sessions. Accepts ?lang and ?output lexer options, a ?prompt option, and ?comments to enable # comments."
    @props[:option_docs] = {"lang"=>"the shell language to lex (default: shell)", "output"=>"the output language (default: plaintext?token=Generic.Output)", "prompt"=>"comma-separated list of strings that indicate the end of a prompt. (default: $,#,>,;)", "comments"=>"enable hash-comments at the start of a line - otherwise interpreted as a prompt. (default: false, implied by ?prompt not containing `#`)"}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/console")
    @props[:aliases] = ["terminal", "shell_session", "shell-session", "terminal", "shell_session", "shell-session"]
    @props[:filenames] = ["*.cap", "*.cap"]
    @props[:mimetypes] = []
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/bbcbasic.rb", :BBCBASIC, "bbcbasic" do
    @props[:tag] = "bbcbasic"
    @props[:title] = "BBCBASIC"
    @props[:desc] = "BBC BASIC syntax"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/bbcbasic")
    @props[:aliases] = []
    @props[:filenames] = ["*,fd1"]
    @props[:mimetypes] = []
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/plain_text.rb", :PlainText, "plaintext" do
    @props[:tag] = "plaintext"
    @props[:title] = "Plain Text"
    @props[:desc] = "A boring lexer that doesn't highlight anything"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/plaintext")
    @props[:aliases] = ["text"]
    @props[:filenames] = ["*.txt", "Messages"]
    @props[:mimetypes] = ["text/plain"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/sas.rb", :SAS, "sas" do
    @props[:tag] = "sas"
    @props[:title] = "SAS"
    @props[:desc] = "SAS (Statistical Analysis Software)"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/sas")
    @props[:aliases] = []
    @props[:filenames] = ["*.sas"]
    @props[:mimetypes] = ["application/x-sas", "application/x-stat-sas", "application/x-sas-syntax"]
    @props[:detectable?] = false
  end

  Lexer.cache "./lib/rouge/lexers/gherkin.rb", :Gherkin, "gherkin" do
    @props[:tag] = "gherkin"
    @props[:title] = "Gherkin"
    @props[:desc] = "A business-readable spec DSL (github.com/cucumber/cucumber/wiki/Gherkin)"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/gherkin")
    @props[:aliases] = ["cucumber", "behat"]
    @props[:filenames] = ["*.feature"]
    @props[:mimetypes] = ["text/x-gherkin"]
      def self.detect?(text)
        return true if text.shebang? 'cucumber'
      end
    @props[:detectable?] = true
  end

  Lexer.cache "./lib/rouge/lexers/hql.rb", :HQL, "hql" do
    @props[:tag] = "hql"
    @props[:title] = "HQL"
    @props[:desc] = "Hive Query Language SQL dialect"
    @props[:option_docs] = {}
    @props[:demo_file] = Pathname.new("/Users/jeanineadkisson/src/rouge/lib/rouge/demos/hql")
    @props[:aliases] = []
    @props[:filenames] = ["*.hql"]
    @props[:mimetypes] = []
    @props[:detectable?] = false
  end

end
